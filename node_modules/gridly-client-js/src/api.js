const axios = require('axios');

class Request {
    constructor(name, apiKey, baseUrl) {
        this.apiKey = apiKey;
        this.baseUrl = baseUrl;
        this.name = name;
        this.headers = {
            Accept: 'application/json;',
            'Content-Type': 'application/json;',
            Authorization: `ApiKey ${this.apiKey}`
        };
    }

    async get() {
        const requestName = this.name;

        try {
            let records = [];
            const MAX_LIMIT = 1000;
            let totalRecord = 0;
            let indexRecord = 0;

            do {
                const params = {
                    offset: indexRecord,
                    limit: MAX_LIMIT
                };

                const response = await axios.get(this.baseUrl + `?page=${encodeURI(JSON.stringify(params))}`, {
                    headers: { Authorization: `ApiKey ${this.apiKey}` }
                });

                totalRecord = response.headers['x-total-count'] ? parseInt(response.headers['x-total-count']) : 0;

                const newRecords = response.data ? response.data : [];
                
                const builtRecords = newRecords.map(record => {
                    const obj = {};

                    record.cells.forEach(cell => {
                        obj[cell.columnId] = cell.value;
                    });

                    return obj;
                });
                records = records.concat(builtRecords);

                indexRecord = indexRecord + MAX_LIMIT;
            } while (indexRecord < totalRecord);

            return records;
        } catch (error) {
            console.log(`FAILED: [GridlyClient] Fetch ${requestName} ${error}`);

            throw {
                errorCode: error.response.status,
                errorMessage: error.response.message
            };
        }
    }

    async post(columnIds, cellValues) {
        const requestName = this.name;

        try {
            const response = await axios.post(
                this.baseUrl,
                JSON.stringify({
                    columns: columnIds,
                    records: [cellValues]
                }),
                {
                    headers: this.headers
                }
            );

            return response;
        } catch (error) {
            console.log(`FAILED: [GridlyClient] Post ${requestName} ${error}`);

            throw {
                errorCode: error.response.status,
                errorMessage: error.response.message
            };
        }
    }
}

class GridlyAPI {
    constructor(apiKey, baseUrl = 'https://api.gridly.com/v1') {
        this.apiKey = apiKey;
        this.baseUrl = baseUrl;
    }

    records(viewId) {
        return new Request(
            'Records',
            this.apiKey,
            `${this.baseUrl}/views/${viewId}/records`
        );
    }
}

module.exports = GridlyAPI;
